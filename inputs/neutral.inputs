###############################################################
# parameters and options for the numerical methods

PoissonSolver.implicit    = true

Ac = 0.25
Ai = 100
Ad = 100

initial_Ac = 0.05
max_dt_growth = 1.1
dt_tolerance_factor = 1.1

advanceScheme = 1
sourceNumericalScheme = 2
densityFlooring = true
implicitReflux = false
use_limiting = true

# testing, diagnostics, etc.
verbosity = 3
checkpoint_interval = -1
chk_prefix = chk
testing = false

###############################################################
# scaling factor for gas density, plasma density, diffusion coeff, tbar, muBar

# 2e-5 <-> 78 km
scalingFactor = 2e-5 #7.6468e-06

# normalization constants, which are modified by scalingFactor.

tBar           = 1e-11
#EBar          = 1e5
muBar          = 0.0382

###############################################################
# output

plot_interval = 1
plot_prefix  = results/out
max_time = 200e-9
max_step = 8000

#plot_period = 1e-9

###############################################################
# simulation domain, discretization info, etc.

# if fixed_dt > 0, use it for the base level
fixed_dt   = -1.0

# the origin of the numerical grid is always (0, 0, 0); the corresponding
# altitude z0 is determined by the reference density and altitude of gas density
# e.g., if the reference density corresponds to an altitude of z but is
# referenced to the origin at zp, then z-z0 = zp or z0 = z-zp

# this is the length of the longest side
domain_length = 4e-2 #2.3e-2
n_cell =  32 32 128
#n_cell =  32 32 64
max_level = 2

periodic_bc = 0 0 0
ref_ratio = 2 2 2 2 2 2 2 2
tag_buffer_size = 3
refine_gradMode = 1 # 0 - mag of undivided grad; 1 - mag of undivided grad of log(ne); 2 - combined, in this case, refine_thresh = [grad(ne), grad(log(ne))]
refine_thresh = 0.6 #
regrid_interval = 2 2 2 2 2 2 2 2
grid_buffer_size = 1
block_factor =  4
max_grid_size = 64
fill_ratio = 0.6


###############################################################
# gas

gas.name          = air
gas.numOfIonSpe   = 2
gas.uniformity    = false

### ground pressure values
gas.density           = 2.688e25
gas.elecDiffCoef      = 0.1995

### nonuniform density

# input from a data file
# If the origin of the simulation box is at (x0,y0,z0),
# then basePoint = (x-x0,y-y0,z-z0), where (x,y,z) is the origin of the box
# covered by the input file.
#gas.densityInputFile  = 77500m-500m-20m-5.txt #neutralDensityData.txt
gas.numGridPoints     = 200 200 2000
gas.spacing           = 5 5 5
gas.basePoint         = -60 -60 -500

# input from a known function
#gas.densityProfile          = exp
#gas.densityProfileParamNum  = 3
#gas.densityprofileParam     = 1.9176e+20 2000 -7200
# density at reference alt, reference alt wrt the origin, scale height

gas.densityProfile          = exp
gas.densityProfileParamNum  = 3
gas.densityprofileParam     = 5.376e20 500 -7200
# density at reference alt, reference alt wrt the origin, scale height

#gas.densityProfile          = stdAtm
#gas.densityProfileParamNum  = 1
#gas.densityprofileParam     = -70e3
# reference alt wrt the origin

# gas inhomogeneities section
gas.inhom           = false
gas.inhomRandom     = true
gas.inhomDensity    = 1e-7
gas.inhomMag        = 1
gas.inhomRadius     = 50

#bgdPlasma.numPieces   = 1
#bgdPlasma.xlb         = 0
#bgdPlasma.funcNames   = Wait
#bgdPlasma.paramNums   = 5
#bgdPlasma.A           = 1.43e13 0.15e-3 84.2e3 0.5e-3 1.2e3
# referene density, alpha = 0.15e-3 1/m, reference height wrt ground,
# beta, and reference height wrt the origin

bgdPlasma.numPieces   = 1
bgdPlasma.xlb         = 0
bgdPlasma.funcNames   = tanhIP
bgdPlasma.paramNums   = 3
bgdPlasma.A           = 2e7 1800 100
# bgdPlasma.inhomForIniPlaCloud = true
# referene density, reference height wrt the origin, and sigma (Liu et al., 2015)

#bgdPlasma.numPieces   = 1
#bgdPlasma.xlb         = 0
#bgdPlasma.funcNames   = const
#bgdPlasma.paramNums   = 1
#bgdPlasma.A           = 1e12 #1e3 # density

#gas.densityProfilePieceNum = 2
#gas.densityProfileLeftBound = 0 7.5e-3
#gas.densityProfileFuncNames = exp exp
#gas.densityProfileParamNums = 3 3
#gas.densityProfileParamVect = 2.688e25 0.0e-2 7.5e-3
#                              7.307e25 7.5e-3 -7.5e-3

###############################################################
# morrow coefficients, Ek = 1.2e-19 V-m^2

ionization.name       =   ionization
ionization.numPieces  =   3
ionization.xlb        =   0      1e-25  1.5e-19
ionization.funcNames  =   const rcpExp rcpExp
ionization.paramNums  =   1 2 2
ionization.A          =   0
                          6.619e-21  -5.593e-19
                          2.0e-20    -7.248e-19

attachment.name       =   attachment
attachment.numPieces  =   3
attachment.xlb        =   0   4.7512e-20    1.05e-19
attachment.funcNames  =   linear linear linear
attachment.paramNums  =   2 2 2
attachment.A          =   0           0
                          -2.8930e-23  6.089e-4
                          2.567e-23   8.889e-5

mobility.name         =   mobility
mobility.numPieces    =   5
mobility.xlb          =   0       1e-25     2.6e-21   1.0e-20   2.0e-19
mobility.funcNames    =   const   rcpLinear rcpLinear rcpLinear rcpLinear
mobility.paramNums    =   1       2         2         2         2
mobility.A            =   3.99e25
                          6.87e24   3.38e2
                          7.2973e23 1.63e4
                          1.03e24   1.3e4
                          7.4e23    7.1e4

###############################################################
# initial plasma cloud(s)

iniPlaCloud.bgdDensity = 0.0

### randomly generated ###
iniPlaCloud.randBlobNum   = 0

iniPlaCloud.number        =    1
iniPlaCloud.type          =    spheroid
iniPlaCloud.center        =    0.5e-2 0.5e-2 3.5e-2
iniPlaCloud.radius        =    0.02e-2
iniPlaCloud.axisLength    =    0.08e-2
iniPlaCloud.mag           =    1e21
iniPlaCloud.sharpness     =    5
iniPlaCloud.axisDirection =    0.0 0.0 1.0
                               
###############################################################
# diffusion solver inputs

diffusionSolver.num_smooth  = 8
diffusionSolver.tolerance   = 1.0e-10
diffusionSolver.num_mg      = 1
diffusionSolver.norm_thresh = 1.0e-10
diffusionSolver.hang_eps    = 1.0e-10
diffusionSolver.max_iter    = 100
diffusionSolver.verbosity   = 1

# 0 = dirichlet, 1 = neumann, 2 = extrapolate
# zero values for all boundaries; nothing needs to be done for normalization
# future work
diffusion.bc_lo   = 2 2 1
diffusion.bc_hi   = 2 2 2
diffusion.bc_value = 0.


###############################################################
# Poisson's equation solver inputs

PoissonSolver.num_smooth  = 8
PoissonSolver.tolerance   = 1.0e-10
PoissonSolver.num_mg      = 1
PoissonSolver.norm_thresh = 1.0e-10
PoissonSolver.hang_eps    = 1.0e-10
PoissonSolver.max_iter    = 100
PoissonSolver.verbosity   = 1

# 0 = dirichlet, 1 = neumann, 2 = extrapolate,
# 3 = dirichlet, with linearly varying potential with z;

#EPot.bc_timeVarying = true
#bc_timeVarying.numPieces    =   2
#bc_timeVarying.paramNums    =   2       1
#bc_timeVarying.xlb          =   0       0.5e-6
#bc_timeVarying.funcNames    =   linear  const
#bc_timeVarying.u            =  -.84e3  -1.68e11
#                               -.84e5
#bc_timeVarying.udot         =   2.1e4    4.2e12
#                                2.1e6
#EPot.bc_lo      = 3       3       3
#EPot.bc_hi      = 3       3       3

#EPot.bc_lo      = 3   3   0
#EPot.bc_loValue = 2.1e6  2.1e6  1.68e5
#EPot.bc_hi      = 3   3   0
#EPot.bc_hiValue = 2.1e6  2.1e6  0.

EPot.bc_lo      = 1   1   1
EPot.bc_loValue = 0   0   2.2e6
EPot.bc_hi      = 1   1   0
EPot.bc_hiValue = 0   0   0

###############################################################
# photoionization solver inputs

PISolver.runSolve       = true
PISolver.testing        = false

PISolver.num_smooth     = 4
PISolver.tolerance      = 1.0e-10
PISolver.num_mg         = 1
PISolver.norm_thresh    = 1.0e-30
PISolver.hang_eps       = 1.0e-10
PISolver.max_iter       = 100
PISolver.verbosity      = 1

# optional
# PISolver.num_pre        = 2
# PISolver.num_post       = 2
# PISolver.num_bottom     = 1

# 0 = dirichlet, 1 = neumann, 3 = Robin
# zero values for all boundaries; nothing needs to be done for normalization
# future work
PI1.bc_lo              = 3 3 3
PI1.bc_hi              = 3 3 3
PI2.bc_lo              = 0 0 0
PI2.bc_hi              = 0 0 0
PI2.bc_value           = 0.0
PI3.bc_lo              = 0 0 0
PI3.bc_hi              = 0 0 0
PI3.bc_value           = 0.0
