###############################################################
# parameters and options for the numerical methods

PoissonSolver.implicit    = false

Ac = 0.25
Ai = 100
Ad = 0.5

initial_Ac = 0.05
max_dt_growth = 1.1
dt_tolerance_factor = 1.1

sourceNumericalScheme = 1
implicitReflux = false
use_limiting = false

# testing, diagnostics, etc.
verbosity = 3
checkpoint_interval = -1
chk_prefix = chk
testing = false

###############################################################
# scaling factor for gas density, plasma density, diffusion coeff, tbar, muBar

scalingFactor = 1.0

# normalization constants, which are modified by scalingFactor.

tBar           = 1e-11
#EBar          = 1e5
muBar          = 0.0382

###############################################################
# output

plot_interval = 10
plot_prefix  = results/out
max_time = 1.1e-9
max_step = 4000

plot_period = -1

###############################################################
# simulation domain, discretization info, etc.

# if fixed_dt > 0, use it for the base level
fixed_dt   = 5e-12

# this is the length of the longest side
domain_length = .25e-2
n_cell = 80 80 128
max_level = 0

periodic_bc = 0 0 0
ref_ratio = 2 2 2 2 2
tag_buffer_size = 3
refine_thresh = 0.05
regrid_interval = 2 2 2 2 2 2
grid_buffer_size = 1
block_factor =  4
max_grid_size = 64
fill_ratio = 0.85


###############################################################
# gas

gas.name          = air
gas.numOfIonSpe   = 2
gas.uniformity    = true

### ground pressure values
gas.density           = 2.688e25
gas.elecDiffCoef      = 0.1995

bgdPlasma.numPieces   = 1
bgdPlasma.xlb         = 0
bgdPlasma.funcNames   = const
bgdPlasma.paramNums   = 1
bgdPlasma.A           = 1e12

###############################################################
# morrow coefficients, Ek = 1.2e-19 V-m^2

ionization.name       =   ionization
ionization.numPieces  =   3
ionization.xlb        =   0      1e-25  1.5e-19
ionization.funcNames  =   const rcpExp rcpExp
ionization.paramNums  =   1 2 2
ionization.A          =   0
                          6.619e-21  -5.593e-19
                          2.0e-20    -7.248e-19

attachment.name       =   attachment
attachment.numPieces  =   3
attachment.xlb        =   0   4.7512e-20    1.05e-19
attachment.funcNames  =   linear linear linear
attachment.paramNums  =   2 2 2
attachment.A          =   0           0
                          -2.8930e-23  6.089e-4
                          2.567e-23   8.889e-5

mobility.name         =   mobility
mobility.numPieces    =   5
mobility.xlb          =   0       1e-25     2.6e-21   1.0e-20   2.0e-19
mobility.funcNames    =   const   rcpLinear rcpLinear rcpLinear rcpLinear
mobility.paramNums    =   1       2         2         2         2
mobility.A            =   3.99e25
                          6.87e24   3.38e2
                          7.2973e23 1.63e4
                          1.03e24   1.3e4
                          7.4e23    7.1e4

###############################################################
# initial plasma cloud(s)

iniPlaCloud.number = 1
iniPlaCloud.center = 0.078125e-2 0.078125e-2 0.125e-2
iniPlaCloud.radius = 0.02e-2 0.02e-2 0.02e-2
iniPlaCloud.mag    = 1e20


###############################################################
# diffusion solver inputs

diffusionSolver.num_smooth  = 8
diffusionSolver.tolerance   = 1.0e-10
diffusionSolver.num_mg      = 1
diffusionSolver.norm_thresh = 1.0e-10
diffusionSolver.hang_eps    = 1.0e-10
diffusionSolver.max_iter    = 100
diffusionSolver.verbosity   = 1

# 0 = dirichlet, 1 = neumann, 2 = extrapolate
# zero values for all boundaries; nothing needs to be done for normalization
# future work
diffusion.bc_lo   = 2 2 1
diffusion.bc_hi   = 2 2 2
diffusion.bc_value = 0.


###############################################################
# Poisson's equation solver inputs

PoissonSolver.num_smooth  = 8
PoissonSolver.tolerance   = 1.0e-10
PoissonSolver.num_mg      = 1
PoissonSolver.norm_thresh = 1.0e-10
PoissonSolver.hang_eps    = 1.0e-10
PoissonSolver.max_iter    = 100
PoissonSolver.verbosity   = 1

# 0 = dirichlet, 1 = neumann, 2 = extrapolate,
# 3 = dirichlet, with linearly varying potential with z;
EPot.bc_lo      = 3 3 3
EPot.bc_loValue = -4.8e6 -4.8e6 -12000
EPot.bc_hi      = 3 3 3
EPot.bc_hiValue = -4.8e6 -4.8e6 0.


###############################################################
# photoionization solver inputs

PISolver.runSolve       = false
PISolver.testing        = false

PISolver.num_smooth     = 4
PISolver.tolerance      = 1.0e-10
PISolver.num_mg         = 1
PISolver.norm_thresh    = 1.0e-30
PISolver.hang_eps       = 1.0e-10
PISolver.max_iter       = 100
PISolver.verbosity      = 1

# optional
# PISolver.num_pre        = 2
# PISolver.num_post       = 2
# PISolver.num_bottom     = 1

# 0 = dirichlet, 1 = neumann, 3 = Robin
# zero values for all boundaries; nothing needs to be done for normalization
# future work
PI1.bc_lo              = 3 3 3
PI1.bc_hi              = 3 3 3
PI2.bc_lo              = 0 0 0
PI2.bc_hi              = 0 0 0
PI2.bc_value           = 0.0
PI3.bc_lo              = 0 0 0
PI3.bc_hi              = 0 0 0
PI3.bc_value           = 0.0

